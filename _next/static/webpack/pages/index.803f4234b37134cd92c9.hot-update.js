webpackHotUpdate_N_E("pages/index",{

/***/ "./pages/sections/one.tsx":
/*!********************************!*\
  !*** ./pages/sections/one.tsx ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return SectionOne; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var reactstrap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! reactstrap */ \"./node_modules/reactstrap/es/index.js\");\n/* harmony import */ var react_reveal_Fade__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-reveal/Fade */ \"./node_modules/react-reveal/Fade.js\");\n/* harmony import */ var react_reveal_Fade__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_reveal_Fade__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var lottie_web__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lottie-web */ \"./node_modules/lottie-web/build/player/lottie.js\");\n/* harmony import */ var lottie_web__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lottie_web__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _public_lottie_data_data_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../public/lottie_data/data.json */ \"./public/lottie_data/data.json\");\nvar _public_lottie_data_data_json__WEBPACK_IMPORTED_MODULE_4___namespace = /*#__PURE__*/__webpack_require__.t(/*! ./../../public/lottie_data/data.json */ \"./public/lottie_data/data.json\", 1);\nvar _jsxFileName = \"/Users/weikit/Desktop/code/hitachi/pages/sections/one.tsx\",\n    _s = $RefreshSig$();\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement;\n\n\n\n\n\nfunction SectionOne() {\n  _s();\n\n  var _this = this;\n\n  var manufacturingSizeByCountry = [{\n    country: 'BRUNEI DARUSSALAM',\n    percentage: '62.9%'\n  }, {\n    country: 'INDONESIA',\n    percentage: '39.8%'\n  }, {\n    country: 'MALAYSIA',\n    percentage: '37.5%'\n  }, {\n    country: 'LAO PDR',\n    percentage: '35.7%'\n  }, {\n    country: 'VIETNAM',\n    percentage: '35.6%'\n  }, {\n    country: 'THAILAND',\n    percentage: '35.4%'\n  }, {\n    country: 'PHILIPPINES',\n    percentage: '34.1%'\n  }, {\n    country: 'MYANMAR',\n    percentage: '32.1%'\n  }, {\n    country: 'CAMBODIA',\n    percentage: '32.1%'\n  }, {\n    country: 'SINGAPORE',\n    percentage: '25.1%'\n  }];\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(0),\n      activeIndex = _useState[0],\n      setActiveIndex = _useState[1];\n\n  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useState\"])(false),\n      animating = _useState2[0],\n      setAnimating = _useState2[1];\n\n  var next = function next() {\n    if (animating) return;\n    var nextIndex = activeIndex === manufacturingSizeByCountry.length - 1 ? 0 : activeIndex + 1;\n    setActiveIndex(nextIndex);\n  };\n\n  var previous = function previous() {\n    if (animating) return;\n    var nextIndex = activeIndex === 0 ? manufacturingSizeByCountry.length - 1 : activeIndex - 1;\n    setActiveIndex(nextIndex);\n  };\n\n  var goToIndex = function goToIndex(newIndex) {\n    if (animating) return;\n    setActiveIndex(newIndex);\n  };\n\n  var slides = manufacturingSizeByCountry.map(function (dataPoint, index) {\n    var leftIndex = index === 0 ? manufacturingSizeByCountry.length - 1 : index - 1;\n    var rightIndex = index == manufacturingSizeByCountry.length - 1 ? 0 : index + 1;\n    return __jsx(reactstrap__WEBPACK_IMPORTED_MODULE_1__[\"CarouselItem\"], {\n      onExiting: function onExiting() {\n        return setAnimating(true);\n      },\n      onExited: function onExited() {\n        return setAnimating(false);\n      },\n      key: dataPoint.country,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"data-point\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"side-data-point\",\n      onClick: function onClick() {\n        return goToIndex(leftIndex);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, __jsx(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, manufacturingSizeByCountry[leftIndex].country), __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }, manufacturingSizeByCountry[leftIndex].percentage)), __jsx(\"div\", {\n      className: \"main-data-point\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }, __jsx(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, dataPoint.country), __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, dataPoint.percentage)), __jsx(\"div\", {\n      className: \"side-data-point\",\n      onClick: function onClick() {\n        return goToIndex(rightIndex);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, __jsx(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, manufacturingSizeByCountry[rightIndex].country), __jsx(\"h1\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, manufacturingSizeByCountry[rightIndex].percentage))));\n  });\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\n    lottie_web__WEBPACK_IMPORTED_MODULE_3___default.a.loadAnimation({\n      container: document.querySelector('#five-pillars'),\n      animationData: _public_lottie_data_data_json__WEBPACK_IMPORTED_MODULE_4__,\n      renderer: \"svg\"\n    });\n  });\n  return __jsx(\"div\", {\n    id: \"section-one\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"section-one-part-one\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, __jsx(react_reveal_Fade__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    top: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, \"ACCELERATED CHANGE IN ASEAN'S\"), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, \"MANUFACTURING\"), __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, \"SECTOR\"))), __jsx(\"div\", {\n    className: \"section-one-part-two\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, __jsx(reactstrap__WEBPACK_IMPORTED_MODULE_1__[\"Container\"], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, __jsx(reactstrap__WEBPACK_IMPORTED_MODULE_1__[\"Row\"], {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, __jsx(reactstrap__WEBPACK_IMPORTED_MODULE_1__[\"Col\"], {\n    sm: {\n      size: 10,\n      offset: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, __jsx(react_reveal_Fade__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    top: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 15\n    }\n  }, __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }, \"IN 2019, ASEAN COUNTRIES WERE JUST STARTING TO EMBRACE\"), __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, \"INDUSTRY 4.0\"), __jsx(\"div\", {\n    id: \"five-pillars\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  }, __jsx(\"svg\", {\n    viewBox: \"0 0 100 25\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 19\n    }\n  }, __jsx(\"defs\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 19\n    }\n  }, __jsx(\"linearGradient\", {\n    id: \"gdp-circle-gradient\",\n    x1: \"5%\",\n    y1: \"75%\",\n    x2: \"75%\",\n    y2: \"5%\",\n    gradientUnits: \"userSpaceOnUse\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 19\n    }\n  }, __jsx(\"stop\", {\n    offset: \"0\",\n    stopColor: \"#1ba7ec\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 21\n    }\n  }), __jsx(\"stop\", {\n    offset: \"0.18\",\n    stopColor: \"#24a3ed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 21\n    }\n  }), __jsx(\"stop\", {\n    offset: \"0.47\",\n    stopColor: \"#3e98f0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 21\n    }\n  }), __jsx(\"stop\", {\n    offset: \"0.85\",\n    stopColor: \"#6786f4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 21\n    }\n  }), __jsx(\"stop\", {\n    offset: \"0.99\",\n    stopColor: \"#797ef6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 21\n    }\n  })), __jsx(\"linearGradient\", {\n    id: \"gdp-line-gradient\",\n    x1: \"12.5%\",\n    x2: \"100%\",\n    gradientUnits: \"userSpaceOnUse\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 19\n    }\n  }, __jsx(\"stop\", {\n    offset: \"0\",\n    stopColor: \"#1ba7ec\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 21\n    }\n  }), __jsx(\"stop\", {\n    offset: \"0.18\",\n    stopColor: \"#24a3ed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 21\n    }\n  }), __jsx(\"stop\", {\n    offset: \"0.47\",\n    stopColor: \"#3e98f0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 21\n    }\n  }), __jsx(\"stop\", {\n    offset: \"0.85\",\n    stopColor: \"#6786f4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 21\n    }\n  }), __jsx(\"stop\", {\n    offset: \"0.99\",\n    stopColor: \"#797ef6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 21\n    }\n  }))), __jsx(\"g\", {\n    className: \"gdp-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 19\n    }\n  }, __jsx(\"g\", {\n    id: \"Layer_2\",\n    \"data-name\": \"Layer 2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 21\n    }\n  }, __jsx(\"g\", {\n    id: \"Layer_1-2\",\n    \"data-name\": \"Layer 1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 23\n    }\n  }, __jsx(\"circle\", {\n    transform: \"rotate(0 0 0)\",\n    className: \"gdp-circle\",\n    cx: \"12.5%\",\n    cy: \"50%\",\n    r: \"15%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 25\n    }\n  }), __jsx(\"line\", {\n    className: \"gdp-line\",\n    x1: \"12.5%\",\n    y1: \"94%\",\n    x2: \"100%\",\n    y2: \"94%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 25\n    }\n  })))), __jsx(\"text\", {\n    x: \"7.5%\",\n    y: \"45%\",\n    className: \"gdp-h-two\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 19\n    }\n  }, \"21%\"), __jsx(\"text\", {\n    x: \"5%\",\n    y: \"60%\",\n    className: \"gdp-h-four\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 19\n    }\n  }, \"TO THE REGION'S\"), __jsx(\"text\", {\n    x: \"7.5%\",\n    y: \"70%\",\n    className: \"gdp-h-four\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 19\n    }\n  }, \"GDP IN 2018\"), __jsx(\"text\", {\n    x: \"30%\",\n    y: \"35%\",\n    className: \"gdp-p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 19\n    }\n  }, \"Home to the sixth largest global economy in 2019 at around US$3 trillion,\"), __jsx(\"text\", {\n    x: \"30%\",\n    y: \"45%\",\n    className: \"gdp-p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 19\n    }\n  }, \"ASEAN is projected to grow at an average of 4.9 percent per annum for the next\"), __jsx(\"text\", {\n    x: \"30%\",\n    y: \"55%\",\n    className: \"gdp-p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 19\n    }\n  }, \"decade. As a core growth driver, manufacturing contributes about US$670\"), __jsx(\"text\", {\n    x: \"30%\",\n    y: \"65%\",\n    className: \"gdp-p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 19\n    }\n  }, \"billion or 21 percent to the regions GDP in 2018.\")))))))));\n}\n\n_s(SectionOne, \"iWrphiqdW3hngB8u5T4tpyMCWYA=\");\n\n_c = SectionOne;\n\nvar _c;\n\n$RefreshReg$(_c, \"SectionOne\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/sections/one.tsx\n");

/***/ })

})